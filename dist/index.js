"use strict";

require("6to5/polyfill");
var Promise = require("bluebird");
module.exports = function (R) {
  var _ = require("lodash-next");
  return function createPlugin(storeName, dispatcherName, eventEmitterName, params) {
    params = params || {};

    _.dev(function () {
      return storeName.should.be.a.String && dispatcherName.should.be.a.String && eventEmitterName.should.be.a.String && params.should.be.an.Object && params.networks.should.be.an.Object && params.oauthproxy.should.be.a.String;
    });

    return R.App.createPlugin({
      displayName: "Hello",
      networks: params.networks,

      update: function (hello, flux) {
        var _this = this;

        Object.keys(this.networks).forEach(function (network) {
          return flux.getStore(storeName).set("/Hello/" + network + "/session", _this.getSession(hello, network));
        });
      },

      getSession: function (hello, network) {
        if (!hello) {
          return null;
        }
        var session = hello(network).getAuthResponse();
        if (!(session && session.access_token && session.expires > Date.now() / 1000)) {
          return null;
        }
        return session;
      },

      installInClient: function (flux, window) {
        var _this2 = this;

        var hello = require("../../bower_components/hello/dist/hello.all");
        var update = function () {
          return _this2.update(hello, flux);
        };
        _.scopeAll(this, ["update", "getSession", "performLogin", "performLogout"]);
        hello.init(params.networks, { oauth_proxy: params.oauthproxy });
        hello.on("auth", update);
        flux.getDispatcher(dispatcherName).addActionListener("/Hello/login", this.performLogin(hello, flux));
        flux.getDispatcher(dispatcherName).addActionListener("/Hello/logout", this.performLogout(hello, flux));
        update();
      },

      installInServer: function (flux, req) {
        this.update(null, flux);
      },

      performLogin: function (hello, flux) {
        var _this3 = this;

        return function (params) {
          return new Promise(function (resolve, reject) {
            _.dev(function () {
              return params.should.be.an.Object;
            });
            var network = params.network || null;
            var options = params.options || {};
            if (network !== null) {
              _.dev(function () {
                return network.should.be.a.String && _.contains(_this3.networks, network).should.be.ok;
              });
            }
            _.dev(function () {
              return options.should.be.an.Object;
            });
            hello.login(network, options, function (err, res) {
              return err ? reject(err) : resolve(res);
            });
          });
        };
      },

      performLogout: function (hello, flux) {
        var _this4 = this;

        return function (params) {
          return new Promise(function (resolve, reject) {
            _.dev(function () {
              return params.should.be.an.Object;
            });
            var network = params.network || null;
            var options = params.options || {};
            if (network !== null) {
              _.dev(function () {
                return network.should.be.a.String && _.contains(_this4.networks, network).should.be.ok;
              });
            }
            _.dev(function () {
              return options.should.be.an.Object;
            });
            hello.logout(network, options, function (err, res) {
              return err ? reject(err) : resolve(res);
            });
          });
        };
      } });
  };
};
//# sourceMappingURL=data:application/json;base64,